#!/bin/bash

INVENTORY="production.ini"
ENV="production"
if [ ! -z "${K8SPILOT}" ]; then
  INVENTORY="local.ini"
  ENV="local"
fi

check_requirements(){
  PY_INTERPRETER=""
  if which python3 >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python3)
  elif which python >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python)
  else
    echo "Can not found avaliable python interpreter in system"
    echo "You may install python >= 3.10 by manual."
    exit 1
  fi
  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/py_checker.py
  if [ "$?" -ne 0 ]; then
    exit 1
  fi
}

check_inventory(){
  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py validation
  if [ "$?" -ne 0 ]; then
    echo "开始初始化inventory"
    ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py generate
    if [ "$?" -ne 0 ]; then
      exit 1
    fi 
    printf "\e[32minventory初始化完成\e[0m\n"
  fi
}

check_artifacts(){
  if [ ! -d $(dirname ${BASH_SOURCE[0]})/artifacts ] || [ -z "$(ls ${BASH_SOURCE[0]})/artifacts)" ]; then
    echo "未找到离线资源，请先下载离线资源"
    exit 1
  fi
}

deploy_kube(){
  local kube_version=$(cat $(dirname ${BASH_SOURCE[0]})/artifacts/kube-version)
  printf "\e[32m开始安装Kubernetes ${kube_version}\e[0m\n"
  ansible-playbook -i $(dirname ${BASH_SOURCE[0]})/inventories/${ENV}/${INVENTORY} pilot.yml
  if [ "$?" -eq 0 ]; then
    printf "\e[32mKubernetes ${kube_version}安装完成.\e[0m"
    printf "\e[32m请登录到Kubernetes集群control-plane节点，执行以下命令查看集群状态: \e[0m\n"
    printf "\e[32mkubectl get nodes -o wide \e[0m\n"
    printf "\e[32m也可以使用lens等工具连接到Kubernetes进行集群管理。复制以下文件或将其内容添加到lens的kubeconfig中: \e[0m\n"
    printf "\e[32mcat .kubeconfig \e[0m\n"
  fi
}

case $1 in
    deploy)
    check_requirements
    check_inventory
    check_artifacts
    deploy_kube
    ;;
esac