---

- name: Copy Kubernetes Control Components To Remote Host
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/artifacts/{{ item }}"
    dest: /usr/local/kubernetes/bin/{{ item }}
    mode: '0755'
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl


- name: Install SSL Certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root 
    group: root 
    mode: 0640
  with_items:
  - { src: "ca-config.json", dest: "{{ kubernetes_home }}/ssl/ca-config.json" }
  - { src: "{{ playbook_dir }}/ca/{{ root_cert }}", dest: "{{ kubernetes_home }}/ssl/ca.pem" }
  - { src: "{{ playbook_dir }}/ca/{{ root_key }}", dest: "{{ kubernetes_home }}/ssl/key.pem" }
  - { src: "bootstrap.yaml", dest: "{{ kubernetes_home }}/etc/bootstrap.yaml" }

- name: Install Kube-Master Systemd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "token", dest: "{{ kubernetes_home }}/ssl/token" }
  - { src: "kube-admin-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-admin-csr.json" }
  - { src: "kube-apiserver-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-apiserver-csr.json" }
  - { src: "kube-controller-manager-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-controller-manager-csr.json" }
  - { src: "kube-scheduler-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-scheduler-csr.json" }
  - { src: "kube-apiserver.conf", dest: "{{ kubernetes_home }}/etc/kube-apiserver.conf" }
  - { src: "kube-controller-manager.conf", dest: "{{ kubernetes_home }}/etc/kube-controller-manager.conf" }
  - { src: "kube-scheduler.conf", dest: "{{ kubernetes_home }}/etc/kube-scheduler.conf" }
  - { src: "kube-apiserver.service.j2", dest: "/usr/lib/systemd/system/kube-apiserver.service" }
  - { src: "kube-controller-manager.service.j2", dest: "/usr/lib/systemd/system/kube-controller-manager.service" }
  - { src: "kube-scheduler.service.j2", dest: "/usr/lib/systemd/system/kube-scheduler.service" }


- name: Generate SSL Certificates
  shell: |
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=ca-config.json kube-admin-csr.json  | cfssljson -bare kube-admin
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=ca-config.json kube-apiserver-csr.json  | cfssljson -bare kube-apiserver  
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=ca-config.json kube-controller-manager-csr.json  | cfssljson -bare kube-controller-manager
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=ca-config.json kube-scheduler-csr.json  | cfssljson -bare kube-scheduler
  args:
    chdir: "{{ kubernetes_home }}/ssl"

- name: Install Master Kubeconfig
  template:
    src: "master.kubeconfig"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0600
  with_items:
  - { dest: "/root/.kube/config", context_user: "kube-admin" }
  - { dest: "{{ kubernetes_home }}/etc/kube-admin.kubeconfig", context_user: "kube-admin" }
  - { dest: "{{ kubernetes_home }}/etc/kube-controller-manager.kubeconfig", context_user: "kube-controller-manager" }
  - { dest: "{{ kubernetes_home }}/etc/kube-scheduler.kubeconfig", context_user: "kube-scheduler" }
  changed_when: True

- name: Encode Certificate
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  loop:
    - { path: "{{ kubernetes_home }}/ssl/ca.pem", varname: "ca_encode" }
    - { path: "{{ kubernetes_home }}/ssl/kube-admin.pem", varname: "kube_admin_encode" }
    - { path: "{{ kubernetes_home }}/ssl/kube-admin-key.pem", varname: "kube_admin_key_encode" }
  register: certs_encode
  tags: encode
  
- name: Set Facts Encode Variable
  set_fact:
    "{{ item.item.varname }}": "{{ item.content }}"
  no_log: true
  loop: "{{ certs_encode.results }}"
  tags: encode

- name: Encode Kube Client Config
  ansible.builtin.template:
    src: kube-client-config-encode.yml
    dest: /root/.kube/config-encode
  tags: encode

- name: Downloading Encode Client Config
  ansible.builtin.fetch:
    src: /root/.kube/config-encode
    dest: "{{ playbook_dir }}/"
    flat: true

- name: Enable Kubernetes Master Service
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - 'kube-apiserver'
  - 'kube-controller-manager'
  - 'kube-scheduler'

- name: Install Client Certificate Auto Approve
  shell: |
    ln -sfT {{ kubernetes_home }}/bin/kubectl /usr/local/bin/kubectl
    kubectl apply -f {{ kubernetes_home }}/etc/bootstrap.yaml

- name: Copy Helm Binary To Remote Host
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/artifacts/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"

- name: Install Helm Binary On Remote Host
  uncompress:
    src:  "/tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: /usr/local/bin/
    mode: '0755'
    strip_components: 1
    include:
      - helm

