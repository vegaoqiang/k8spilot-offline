
# - name: Ensure nfsmount.conf exists
#   ansible.builtin.lineinfile:
#     path: /etc/nfsmount.conf
#     line: "[ NFSMount_Global_Options ]"
#     create: yes
#     state: present

# - name: Update nfsmount.conf
#   ansible.builtin.blockinfile:
#     path: /etc/nfsmount.conf
#     insertafter: "[ NFSMount_Global_Options ]"
#     create: yes
#     block: |
#       retrans=5
#       acregmin=0
#       acregmax=0
#       acdirmin=0
#       acdirmax=0


# - name: Downloading CSI Driver NFS Helm Chart
#   amazon.aws.s3_object:
#     endpoint_url: "{{ s3_endpoint_url }}"
#     access_key: "{{ s3_access_key }}"
#     secret_key: "{{ s3_secret_key }}"
#     bucket: "{{ s3_bucket_name }}"
#     object: "csi-driver-nfs/csi-driver-nfs-{{ csi_nfs_version }}.tgz"
#     dest: "{{ playbook_dir }}/.ansible_temp/csi-driver-nfs-{{ csi_nfs_version }}.tgz"
#     mode: get
#     overwrite: different
#   delegate_to: localhost
#   run_once: true

- name: Copy CSI Driver NFS Helm Chart To Remote Host
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/artifacts/csi-driver-nfs-{{ csi_nfs_version }}.tgz"
    dest: "/tmp/csi-driver-nfs-{{ csi_nfs_version }}.tgz"

- name: Copy CSI Driver NFS Values Override File
  ansible.builtin.template:
    src: "csi-driver-nfs-values-override.yaml.j2"
    dest: "/tmp/csi-driver-nfs-values-override.yaml"
    mode: '0644'

- name: Copy CSI Driver NFS Offline Images To Remote Host
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/artifacts/images/csi-driver-nfs"
    dest: "/tmp/"
    mode: '0644'
  delegate_to: "{{ item }}"
  loop: "{{ groups['worker'] }}"

- name: Load CSI Driver NFS Images
  ansible.builtin.shell: |
    ls /tmp/csi-driver-nfs/*.tar|xargs -n 1 ctr -n k8s.io i import
  delegate_to: "{{ item }}"
  loop: "{{ groups['worker'] }}"
  async: 3600
  poll: 0

- name: Install CSI Driver NFS
  ansible.builtin.shell: |
    helm upgrade --install csi-driver-nfs /tmp/csi-driver-nfs-{{ csi_nfs_version }}.tgz --namespace kube-system --values /tmp/csi-driver-nfs-values-override.yaml


# - name: Install CSI Driver NFS v{{ csi_nfs_version }}
#   kubernetes.core.helm:
#     chart_ref: "/tmp/csi-driver-nfs-{{ csi_nfs_version }}.tgz"
#     name: csi-driver-nfs
#     chart_version: "{{ csi_nfs_version }}"
#     wait: false
#     # state: absent
#     release_namespace: kube-system
#     create_namespace: true
#     values:
#       driver:
#         name: nfs.csi.k8s.io
#       image: 
#         nfs: 
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/nfsplugin"
#           tag: "{{ nfsplugin_tag }}"
#         csiProvisioner:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/csi-provisioner"
#           tag: "{{ csiprovisioner_tag }}"
#         livenessProbe:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/livenessprobe"
#           tag: "{{ livenessprobe_tag }}"
#         nodeDriverRegistrar:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/csi-node-driver-registrar"
#           tag: "{{ nodedriverregistrar_tag }}"
#         csiResizer:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/csi-resizer"
#         csiSnapshotter:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/csi-snapshotter"
#         externalSnapshotter:
#           repository: "{{ csi_registry_prefix }}/registry.k8s.io/sig-storage/snapshot-controller"
#       storageClass:
#         create: true
#         name: nfs-csi
#         annotations:
#           storageclass.kubernetes.io/is-default-class: "true"
#         parameters:
#           server: "{{ custom_nfs_server_address if custom_nfs_server_address else 'nfs-server.kube-system.svc.cluster.local' }}"
#           share: /
#       # feature: 
#       #   propagateHostMountOptions: true

      
- name: Transfor NFS YAML To Control
  ansible.builtin.template:
    src: nfs-server.yaml.j2
    dest: "{{ kubernetes_home }}/etc/nfs-server.yaml"
  when: nfs_server_address is not defined or nfs_server_address is none

- name: Install NFS Server
  ansible.builtin.shell: |
    kubectl apply -f {{ kubernetes_home }}/etc/nfs-server.yaml
  when: nfs_server_address is not defined or nfs_server_address is none